<program> ::= <preparation> <EOL> <transformation> <EOL> <training> <comparison> "export" <string>

<preparation> ::= "preparation {" <EOL> <train> <EOL> <test> <EOL> <preprocessing> "}"
<preprocessing> ::= "preprocessing {" <preprocessing-functions> "}"<EOL>
<preprocessing-functions> ::= <preprocessing-function> <EOL> <preprocessing-functions> | <preprocessing-function> <EOL>
<preprocessing-function> ::= notNull() | removeOutliers <float>, <float> | drop <string>

<train> ::= train <PATH>
<test> ::= test <PATH>
<PATH> ::= ^(.+)\/([^\/]+)$


<transformation-block> ::= "transformation {" <EOL> <transformation-block> "}" <EOL>
<transformations> ::= <minmax-block> <standardscaler-block> <pca-block>
<minmax-block> ::= <minmax> <minmax-block> | epsilon
<minmax> ::= "minMax" <ID> "{" "}"
<minmax-params> ::= <feature_range> <copy>"feature_range ("<integer>", " <integer>")" | epsilon
<minmax-param-feature_range> ::= "feature_range ("<integer>", " <integer>")" | epsilon
<minmax-param-copy> ::= "copy " <boolean>  | epsilon


<standardscaler-block> ::= <standardscaler> | epsilon

<pca-block> ::= <pca> <pca-block> | epsilon
<pca> ::= "pca" <ID> "{ n_components" <float> "}"


<pre-processing> ::= <expression> <EOL> | <expression>
<standard> ::= <expression> <EOL> | <expression>
<expression> ::= <name> <value>
<value> ::= <float> | <boolean>