from graphviz import Digraph

g = Digraph('G')
g.attr(rankdir='LR')
g.node_attr.update(style='filled', fillcolor='white', shape='box')
colors = ['green','red','blue','orange']
with g.subgraph(name='cluster_0') as d:
	d.attr(style='filled', fillcolor='antiquewhite1')
	d.attr(rank='same')
	d.edge('../input/digit-recognizer/train.csv','train')
	d.edge('../input/digit-recognizer/test.csv','test')
	d.edge('train','rmNull')
	d.edge('test','rmNull')
	d.edge('rmNull','rmOutliers')
	d.edge('rmOutliers','PreProssTrain')
	d.edge('rmOutliers','PreProssTest')
	d.attr(label='Data pre-processing')
with g.subgraph(name='cluster_1') as t:
	t.attr(style='filled', fillcolor='palegreen3')
	t.attr(rank='same')
	t.node('t1', style='filled', fillcolor='thistle')
	t.edge('PreProssTrain','t1')
	t.edge('PreProssTest','t1')
	t.edge('t1','t1_minMax01')
	t.edge('t1_minMax01','t1_pca01')
	t.node('t2', style='filled', fillcolor='thistle')
	t.edge('PreProssTrain','t2')
	t.edge('PreProssTest','t2')
	t.edge('t2','t2_minMax01')
	t.edge('t2_minMax01','t2_pca02')
	t.attr(label='Data Transformation')
with g.subgraph(name='cluster_2') as tr:
	tr.attr(style='filled', fillcolor='paleturquoise')
	tr.attr(rank='same')
	tr.node('gaussian1', style='filled', fillcolor='peachpuff')
	tr.edge('t1_pca01', 'gaussian1')
	tr.node('knn1', style='filled', fillcolor='peachpuff')
	tr.edge('t2_pca02', 'knn1')
	tr.node('knn2', style='filled', fillcolor='peachpuff')
	tr.edge('t2_pca02', 'knn2')
	tr.attr(label='Training')
with g.subgraph(name='cluster_3') as val:
	val.attr(style='filled', fillcolor='antiquewhite3')
	val.attr(rank='same')
	val.node('cross_validate')
	val.edge('gaussian1','cross_validate')
	val.edge('knn1','cross_validate')
	val.attr(label='Validation')
with g.subgraph(name='cluster_4') as comp:
	comp.attr(style='filled', fillcolor='antiquewhite2')
	comp.attr(rank='same')
	comp.node('cross_validate')
	comp.node('compare',shape='record', label='comparison |{ test_acc weight 10 | fit_time weight 3 }')
	comp.edge('cross_validate','compare')
	comp.attr(label='Comparison')
with g.subgraph(name='cluster_5') as report:
	report.attr(style='filled', fillcolor='azure2')
	report.attr(rank='same')
	report.node('REPORT',shape='record', label='REPORT | { ARRAY RESULT | CLOUD DOT  }')
	report.edge('compare','REPORT')
	report.attr(label='Display Report')
g

g.view()
